rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get user role from custom claims
    function getUserRole() {
      return request.auth.token.role;
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is teacher (admin)
    function isTeacher() {
      return isAuthenticated() && getUserRole() == 'teacher';
    }

    // Helper function to check if user is tutor
    function isTutor() {
      return isAuthenticated() && getUserRole() == 'tutor';
    }

    // Helper function to check if user is student
    function isStudent() {
      return isAuthenticated() && getUserRole() == 'student';
    }

    // Helper function to check if student owns the request (checks students array)
    function studentOwnsRequest(studentEmail) {
      // For student event requests, check if email is in students array
      // Students array format: [{value: "email", label: "name"}] or ["email"]
      return resource.data.students.size() > 0 &&
             resource.data.students[0].value == studentEmail;
    }

    // Users collection - only teachers can modify roles
    match /users/{documentEmail} {
      allow read: if isAuthenticated();

      // firestore db stores user docs with email as doc ID
      allow create: if isAuthenticated() && (request.auth.token.email == documentEmail || request.auth.token.email == "computing@kings.edu.au" || request.auth.token.email == "mienna@kings.edu.au" || request.auth.token.email == "cstcomputing@gmail.com" );

      // isTeacher || ((isAuthenticated) && (theirUserAcc) && (notModifying the key 'role'))
      // prevent non-teacher users from modifying their own role
      allow update: if isTeacher() || (isAuthenticated() && request.auth.token.email == documentEmail && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']));
      allow delete: if isTeacher();
    }

    // Events collection (APPROVED events only - counts for payroll/hours)
    match /events/{eventId} {
      allow read: if isAuthenticated();
      // only teachers can create/delete events
      allow create, delete: if isTeacher();
      // teachers can update anything, tutors can only update workStatus
      allow update: if isTeacher() || (isTutor() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['workStatus']));
    }

    // Email Events Queue collection (temporary queue for email notifications)
    match /emailEventsQueue/{eventId} {
      allow read: if isAuthenticated();

      // Only teachers can manage email queue
      allow create, update, delete: if isTeacher();
    }

    // Student Event Requests collection (displays on calendar in red, no payroll impact)
    match /studentEventRequests/{requestId} {
      allow read: if isAuthenticated();

      // Only students can create their own requests
      allow create: if isStudent();

      // Teachers can update/delete any request, students can only update/delete their own requests
      allow update, delete: if isTeacher() || (isStudent() && studentOwnsRequest(request.auth.token.email));
    }

    // Tutor Availabilities collection (tutor availability slots)
    match /tutorAvailabilities/{availabilityId} {
      allow read: if isAuthenticated();

      // Only tutors can create their own availabilities
      allow create: if isTutor() && request.auth.uid == request.resource.data.tutor;

      // Tutors can only update/delete their own availabilities
      allow update, delete: if isTutor() && request.auth.uid == resource.data.tutor;
    }

    // Classes collection - only teachers can modify
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher();
    }

    // Subjects collection - only teachers can modify
    match /subjects/{subjectId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher();
    }

    // Students collection - read-only for all authenticated users, only teachers can modify
    match /students/{studentId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher();
    }

    // Timesheets collection - teachers can read/write, tutors can read their own
    match /timesheets/{timesheetId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isTeacher();
    }

  }
}

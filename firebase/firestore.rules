rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get user role from custom claims
    function getUserRole() {
      return request.auth.token.role;
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is teacher (admin)
    function isTeacher() {
      return isAuthenticated() && getUserRole() == 'teacher';
    }

    // Helper function to check if user is tutor
    function isTutor() {
      return isAuthenticated() && getUserRole() == 'tutor';
    }

    // Helper function to check if user is student
    function isStudent() {
      return isAuthenticated() && getUserRole() == 'student';
    }


    // Users collection - only teachers can modify roles
    match /users/{documentEmail} {
      allow read: if isAuthenticated();
      
      // email from firebase auth token inside request 
      const fbAuthEmail = request.auth.token.email;

      // firestore db stores user docs with email as doc ID
      allow create: if isAuthenticated() && fbAuthEmail == documentEmail;

      // isTeacher || ((isAuthenticated) && (theirUserAcc) && (notModifying the key 'role'))
      // prevent non-teacher users from modifying their own role
      allow update: if isTeacher() || (isAuthenticated() && fbAuthEmail == documentEmail && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']));
      allow delete: if isTeacher();
    }

    // Events collection (APPROVED events only - counts for payroll/hours)
    match /events/{eventId} {
      allow read: if isAuthenticated();
      // only teachers can create/update/delete events
      allow create, update, delete: if isTeacher();
    }

    // Email Events Queue collection (temporary queue for email notifications)
    match /emailEventsQueue/{eventId} {
      allow read: if isAuthenticated();

      // Only teachers can manage email queue
      allow create, update, delete: if isTeacher();
    }

    // Student Event Requests collection (displays on calendar in red, no payroll impact)
    match /studentEventRequests/{requestId} {
      allow read: if isAuthenticated();

      // Only students can create their own requests
      allow create: if isStudent();

      // Teachers can update/delete any request, students can only update/delete requests they created
      // note: Teacher approves -> deleted from studentEventRequests -> created in events (only teachers can edit events)
      allow update, delete: if isTeacher() || request.auth.uid == resource.data.createdBy;
    }

    // Tutor Availabilities collection (tutor availability slots)
    match /tutorAvailabilities/{availabilityId} {
      allow read: if isAuthenticated();

      // Only tutors can create their own availabilities
      allow create: if isTutor() && request.auth.uid == request.resource.data.tutor;

      // Tutors can only update/delete their own availabilities
      allow update, delete: if isTutor() && request.auth.uid == resource.data.tutor;
    }

    // Classes collection - only teachers can modify
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher();
    }

    // Subjects collection - only teachers can modify
    match /subjects/{subjectId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher();
    }

  }
}
